{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/MyPosts/MyPosts.module.css","components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","Preloader/Loader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Dialogs/Dialogs.module.scss","components/Users/Users.module.scss","reportWebVitals.js","api/api.ts","redux/messageReducer.ts","HOC/withAuthRedirect.tsx","redux/profileReducer.ts","redux/usersReducer.ts","redux/authreducer.ts","redux/appReducer.ts","redux/redaxstore.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Common/FormControls/FormsControls.tsx","redux/utils/validators/validators.ts","components/Dialogs/Dialogs.tsx","components/Users/Paginator.tsx","components/Users/User.tsx","Preloader/giphy.gif","Preloader/Loader.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/postForm/postForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileEditMode.tsx","components/Profile/ProfileInfo/ProfileReadMode.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Login/loginForm.tsx","components/Login/login.tsx","App.js","index.js","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.scss","components/Common/FormControls/FormsControls.module.css","components/Profile/MyPosts/postForm/postForm.module.scss"],"names":["module","exports","ResultCodesEnum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_NEW_TEXT_MESSAGE","messagesPage","dialogs","id","name","messages","message","messageReducer","state","action","type","instance","axios","create","withCredentials","headers","baseURL","ResultCodeForCaptha","usersAPI","getUsers","currentPage","pageSize","get","response","data","delUser","delete","resultCode","addUser","post","profileAPI","userId","newStatus","put","status","profileData","photo","formData","FormData","append","Component","headerAPI","email","password","rememberMe","captcha","actions","postText","profile","photos","profilePage","posts","likeCount","profileReducer","users_date","users","totalUsersCount","isFetching","followingInProgress","totalCount","following","addDelFlow","dispatch","apiMethod","actionCreator","a","Success","usersReducer","map","u","followed","filter","SET_USER_AUTH","SET_CUPTCHA","setUserAuth","login","isAuth","payload","setCaptcha","captchaUrl","auth","authUserThunk","authReducer","SET_INITIALIZED","initialState","initialized","appReducer","reducers","combineReducers","usersPage","form","formReducer","composeEnhancers","window","compose","store","createStore","applyMiddleware","thunkMiddleware","Navbar","props","className","classes","nav","activeClassName","active","decoration","to","navItem","navItemIcon","navItemText","News","item","Music","Settings","DialogItem","dialogsItem","dialogsActive","dialogsItemLink","Message","messageOuter","messageInner","Textarea","input","meta","restProps","hasError","touched","error","bord","undefined","Input","createField","placeholder","component","validators","text","Field","validate","requiredField","value","Dialogs","useDispatch","useSelector","dialogElements","messagesElements","itemMessage","dialogsItems","messageArea","dialogsMessages","AddMessageFormRedux","onSubmit","e","maxLength","length","maxLengthCreator","reduxForm","handleSubmit","messageTextarea","messageButton","messageLabel","htmlFor","messageLabelText","Paginator","onPageChanged","useState","currentInterval","setCurrentInterval","pagesCount","Math","ceil","totalIntervalCount","pages","i","push","left","right","paginator","paginatorButton","disabled","onClick","p","selectedPage","User","user","userDecor","src","large","userAva","alt","userButtonUnfollow","some","bind","userButtonFollow","userName","Loader","giphy","gifka","Users","UsersContainer","useEffect","getState","items","getUsersThunkCreator","pageNumber","updateUsersThunkCreator","Post","like","postImage","itemImg","itemInner","itemInnerMessage","itemInnerLike","itemInnerLikeIcon","itemInnerLikeText","MyPostForm","ReduxPostForm","formText","rows","cols","formButton","formLabel","formLabelText","MyPosts","postElements","postsTitle","ReduxProfileForm","Object","entries","contacts","contact","ProfileEditMode","initialValues","offEditMode","Error","stopSubmit","_error","Promise","reject","setProfileUpdateThunk","ProfileReadMode","owner","onEditMode","profileInfo","profileInfoTitle","profileInfoEdit","profileInfoButton","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","profileInfoContact","ProfileStatus","React","memo","statusFromServer","shallowEqual","editMode","setEditMode","setStatus","statusSpan","onDoubleClick","statusInput","autoFocus","onBlur","onChange","currentTarget","ProfileInfo","description","userImg","files","accept","userImgInput","userImgLabel","Button","variant","color","userImgLabelButton","userNameAboveStatus","ProfileStatusWithHooks","Profile","withRouter","authorizedUserId","currentUserId","match","params","history","setUserProfileThunk","getStatusThunk","Header","head","icon","style","fontSize","logout","test","buttonLogout","ReduxLoginForm","commonError","Login","CaptchaIsRequired","url","App","all","path","render","exact","href","rel","target","border","width","height","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bad8ba14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1xRfO\",\"navItem\":\"Navbar_navItem__3lTEo\",\"decoration\":\"Navbar_decoration__NkD5c\",\"navItemIcon\":\"Navbar_navItemIcon__idZfc\",\"navItemText\":\"Navbar_navItemText__1xcKg\",\"a\":\"Navbar_a__brDh-\",\"active\":\"Navbar_active__RMmus\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3227D\",\"postsTitle\":\"MyPosts_postsTitle__2JAwL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"News_item__9OW0N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Music_item__3CaPB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Settings_item__3T9fH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gifka\":\"Loader_gifka__2bye6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__2BMw-\",\"userImg\":\"ProfileInfo_userImg__2JHfL\",\"userImgInput\":\"ProfileInfo_userImgInput__Y0ArT\",\"userImgLabel\":\"ProfileInfo_userImgLabel__3BR75\",\"userImgLabelButton\":\"ProfileInfo_userImgLabelButton__26AFc\",\"userNameAboveStatus\":\"ProfileInfo_userNameAboveStatus__32xwS\",\"status\":\"ProfileInfo_status__2KNRM\",\"statusSpan\":\"ProfileInfo_statusSpan__34wfF\",\"statusInput\":\"ProfileInfo_statusInput__2fN_R\",\"profileInfo\":\"ProfileInfo_profileInfo__31Y7h\",\"profileInfoContact\":\"ProfileInfo_profileInfoContact__L4WOW\",\"profileInfoButton\":\"ProfileInfo_profileInfoButton__mmEOT\",\"profileInfoTitle\":\"ProfileInfo_profileInfoTitle__qTJhk\",\"profileInfoEdit\":\"ProfileInfo_profileInfoEdit__22Vo7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2yzB0\",\"dialogsItems\":\"Dialogs_dialogsItems__ARvkF\",\"dialogsItem\":\"Dialogs_dialogsItem__2oGPo\",\"dialogsItemLink\":\"Dialogs_dialogsItemLink__1HAFj\",\"dialogsMessages\":\"Dialogs_dialogsMessages__d3g9S\",\"dialogsActive\":\"Dialogs_dialogsActive__1OMOY\",\"messageInner\":\"Dialogs_messageInner__2abHj\",\"messageOuter\":\"Dialogs_messageOuter__3SpFV\",\"messageTextarea\":\"Dialogs_messageTextarea__36-8_\",\"messageButton\":\"Dialogs_messageButton__1hYjt\",\"messageLabel\":\"Dialogs_messageLabel__3Dr-N\",\"messageLabelText\":\"Dialogs_messageLabelText__wld-L\",\"messageArea\":\"Dialogs_messageArea__2CVXO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Users_selectedPage__24xg3\",\"paginator\":\"Users_paginator__3HDrw\",\"anim2\":\"Users_anim2__1q3ig\",\"paginatorButton\":\"Users_paginatorButton__1XbKb\",\"anim\":\"Users_anim__3Z5Z9\",\"user\":\"Users_user__-uq86\",\"userName\":\"Users_userName__2Abbx\",\"userButtonFollow\":\"Users_userButtonFollow__1D6In\",\"userButtonUnfollow\":\"Users_userButtonUnfollow__1vYVu\",\"userDecor\":\"Users_userDecor__2yk7o\",\"userAva\":\"Users_userAva__2BGRl\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { profileType, oneUserType } from './../types.ts/types';\r\nimport axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"109ee755-2793-4679-9f30-299f9cb84e2d\"\r\n    },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n\r\n})\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\ntype getUsersType = {\r\n    items: Array<oneUserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\ntype delOrAddUserType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\nexport const usersAPI = {\r\n    getUsers (currentPage: number, pageSize: number) {\r\n        return (instance.get<getUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n        .then(response => {return response.data}))\r\n    },\r\n    delUser (id: number) {\r\n        return (instance.delete<delOrAddUserType>(`follow/${id}`)\r\n        .then(response => {return response.data.resultCode}))\r\n    },\r\n    addUser (id: number) {\r\n        return (instance.post<delOrAddUserType>(`follow/${id}`)\r\n        .then(response => {return response.data.resultCode}))\r\n    }\r\n}\r\n\r\ntype updateStatusType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\ntype updateProfileDataType = updateStatusType\r\ntype saveProfilePhotoType = {\r\n    data: {photos: {large: string, small: string}}\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport const profileAPI = {\r\n    userProfile (userId: number) {\r\n        return (instance.get<profileType>(`profile/${userId}`)\r\n        .then(response => {return response.data}))\r\n    },\r\n    getStatus (userId: number) {\r\n        return (instance.get<string>(`profile/status/${userId}`)\r\n        .then(response => {return response.data}))\r\n    },\r\n    updateStatus (newStatus: string) {\r\n        return (instance.put<updateStatusType>('profile/status', {status: newStatus})\r\n        .then(response => {return response.data}))\r\n    },\r\n    updateProfileData (profileData: profileType) {\r\n        return (instance.put<updateProfileDataType>('profile', profileData)\r\n        .then(response => {return response.data}))\r\n    },\r\n    saveProfilePhoto (photo: File) {\r\n        debugger\r\n        let formData = new FormData();\r\n        formData.append('image', photo)\r\n        return (instance.put<saveProfilePhotoType>('profile/photo', formData, {headers: {\"Content-Type\" : 'multipart/form-data'}})\r\n        .then(response => {return response.data}))\r\n    }\r\n}\r\n\r\nexport enum ResultCodeForCaptha {\r\n    CaptchaIsRequired = 10\r\n}\r\ntype userAuthType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype loginType = {\r\n    resultCode: ResultCodesEnum | ResultCodeForCaptha\r\n    messages: Array<string>\r\n    data: {userId: number}\r\n}\r\ntype deleteType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\ntype getCaptchaUrlType = {\r\n    url: string\r\n}\r\nexport const headerAPI = {\r\n    userAuth () {\r\n        return (instance.get<userAuthType>('auth/me')\r\n        .then(response => {return response.data}));\r\n    },\r\n    login (email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return (instance.post<loginType>('auth/login', {email, password, rememberMe, captcha})\r\n        .then(response => {return response.data}));\r\n    },\r\n    logout () {\r\n        return (instance.delete<deleteType>('auth/login')\r\n        .then(response => {return response.data}));\r\n    },\r\n    getCaptchaUrl () {\r\n        return (instance.get<getCaptchaUrlType>('security/get-captcha-url')\r\n        .then(response => {return response.data}));\r\n    }\r\n}\r\n","const ADD_NEW_TEXT_MESSAGE = 'ADD-NEW-TEXT-MESSAGE'\r\n\r\ntype addNewMessageType = {\r\n    type: typeof ADD_NEW_TEXT_MESSAGE\r\n    message: string\r\n}\r\nexport const addNewMessage = (message: string): addNewMessageType => {\r\n    return (\r\n        { type: ADD_NEW_TEXT_MESSAGE, message }\r\n    )\r\n}\r\n\r\ntype messageReducerActionsType = addNewMessageType\r\n\r\ntype dialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype messagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet messagesPage = {\r\n    dialogs: [\r\n        { id: 1, name: 'Dimych' },\r\n        { id: 2, name: 'Andrey' },\r\n        { id: 3, name: 'Sasha' },\r\n        { id: 4, name: 'Dima' },\r\n        { id: 5, name: 'Valera' },\r\n        { id: 6, name: 'Danil' }\r\n    ] as Array<dialogType>,\r\n    messages: [\r\n        { id: 1, message: 'Hi Alexander' },\r\n        { id: 2, message: 'How are u?' },\r\n        { id: 3, message: 'What are u doing?' },\r\n        { id: 4, message: 'Lets code on React' },\r\n        { id: 4, message: 'Im free' }\r\n    ] as Array<messagesType>,\r\n}\r\nexport type messagePageType = typeof messagesPage\r\n\r\nconst messageReducer = (state = messagesPage, action: messageReducerActionsType): messagePageType => {\r\n    if (action.type === ADD_NEW_TEXT_MESSAGE) {\r\n        let message = action.message\r\n        return {\r\n            ...state,\r\n            messages: [...state.messages, { id: 5, message: message }],\r\n        }\r\n    }\r\n    return state\r\n};\r\n\r\nexport default messageReducer","import React, {FC} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RootState } from '../redux/redaxstore';\r\n\r\nexport const WithAuthRedirect = (Component: FC<{}>) => {\r\n    const RedirectComponent = () => {\r\n        const isAuth = useSelector((state: RootState) => state.authReducer.isAuth)\r\n        if (!isAuth) {\r\n            return (\r\n                <Redirect to={\"/login\"} />\r\n            )\r\n        }\r\n        return (<Component />)\r\n    }\r\n    return RedirectComponent;\r\n}\r\n","import { postsType, photosType, profileType } from './../types.ts/types';\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { profileAPI, ResultCodesEnum } from \"../api/api\"\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { InferActionTypes, RootState } from './redaxstore';\r\n\r\nexport const actions = {\r\n    addPost: (postText: string) => ({ type: 'ADD_POST', postText } as const),\r\n    setUserProfile: (profile: profileType) => ({type: 'SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\r\n    savePhotoSuccess: (photos: photosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const),\r\n    saveProfileSuccess: () => ({type: 'SAVE_PROFILE_SUCCESS'} as const),\r\n    onEditMode: () => ({type: 'ON_EDIT_MODE'} as const),\r\n    offEditMode: () => ({type: 'OFF_EDIT_MODE'} as const)\r\n}\r\n\r\ntype profileReducerActionsType = InferActionTypes<typeof actions>\r\n\r\nlet profilePage = {\r\n    posts: \r\n        [{ id: 1, message: 'Hello', likeCount: '1' },\r\n        { id: 2, message: 'Hi', likeCount: '12' },\r\n        { id: 3, message: 'Where you', likeCount: '4' },\r\n        { id: 4, message: 'Bi', likeCount: '2' },\r\n        { id: 5, message: 'Blue', likeCount: '53' }\r\n        ] as Array<postsType>,\r\n    profile: null as profileType | null,\r\n    status: \"\" as string,\r\n    postText: \"\" as string \r\n}\r\n\r\nexport type profilePageType = typeof profilePage\r\n\r\nconst profileReducer = (state = profilePage, action: profileReducerActionsType): profilePageType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST': return {\r\n            ...state,\r\n            posts: [...state.posts, { id: 5, message: action.postText, likeCount: '53' }],\r\n        }\r\n        case 'SET_USER_PROFILE': return {\r\n            ...state, \r\n            profile: action.profile\r\n        }\r\n        case 'SET_STATUS': return {\r\n            ...state, \r\n            status: action.status\r\n        }\r\n        case 'SAVE_PHOTO_SUCCESS': return {\r\n            ...state,\r\n            profile: {...state.profile, photos: action.photos} as profileType\r\n        }\r\n        case 'SAVE_PROFILE_SUCCESS': return {\r\n            ...state,\r\n            profile: {...state.profile} as profileType\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setUserProfileThunk = (userId: number):\r\nThunkAction<Promise<void>, RootState, unknown, profileReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.userProfile(userId)\r\n        dispatch(actions.setUserProfile(response))\r\n    }\r\n}\r\nexport const getStatusThunk = (userId: number): \r\nThunkAction<Promise<void>, RootState, unknown, profileReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n        dispatch(actions.setStatus(response))\r\n    }\r\n}\r\nexport const updateStatusThunk = (newStatus: string): \r\nThunkAction<Promise<void>, RootState, unknown, profileReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(newStatus)\r\n        if (response.resultCode === 0) {\r\n            dispatch(actions.setStatus(newStatus))\r\n        }\r\n    }\r\n}\r\nexport const setPhotoThunk = (photo: File): \r\nThunkAction<Promise<void>, RootState, unknown, profileReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.saveProfilePhoto(photo)\r\n        debugger\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.savePhotoSuccess(response.data.photos))\r\n        }\r\n    }\r\n}\r\nexport const setProfileUpdateThunk = (profileData: profileType): \r\nThunkAction<Promise<void>, RootState, unknown, profileReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.updateProfileData(profileData)\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.saveProfileSuccess())\r\n        } else if (response.resultCode === ResultCodesEnum.Error){\r\n            dispatch(stopSubmit(\"profileForm\", {_error: response.messages[0]}));\r\n            return Promise.reject(response.messages[0])\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer","import { ResultCodesEnum } from './../api/api';\r\nimport { oneUserType } from './../types.ts/types'\r\nimport { usersAPI } from \"../api/api\"\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { InferActionTypes, RootState } from './redaxstore'\r\nimport { Dispatch } from 'redux'\r\n\r\nlet users_date = {\r\n    users: [] as Array<oneUserType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array<number>, //ids of users on page\r\n}\r\ntype users_dateType = typeof users_date\r\n\r\nconst usersReducer = (state = users_date, action: usersReducerActionsType): users_dateType => {\r\n    switch (action.type) {\r\n        case 'ADD_USER': return {        \r\n            ...state,\r\n            users: state.users.map(u => {\r\n                if (u.id === action.id) {\r\n                    return { ...u, followed: true }\r\n                } return u\r\n            })        \r\n        } \r\n        case 'DELETE_USER': return {        \r\n            ...state,\r\n            users: state.users.map(u => {\r\n                if (u.id === action.id) {\r\n                    return { ...u, followed: false }\r\n                } return u\r\n            })\r\n        } \r\n        case 'SET_USERS': return {\r\n            ...state, users: action.users  \r\n        } \r\n        case 'SET_CURRENT_PAGE': return {\r\n            ...state, currentPage: action.currentPage    \r\n        } \r\n        case 'SET_TOTAL_COUNT_USER': return {\r\n            \r\n            ...state, totalUsersCount: action.totalCount \r\n        } \r\n        case 'SET_ISFETCHING': return {\r\n            ...state, isFetching: action.isFetching \r\n        } \r\n        case 'FOLLOWING_IN_PROGRESS': return {\r\n            ...state,\r\n            followingInProgress: action.following\r\n            ? [...state.followingInProgress, action.userId]\r\n            : state.followingInProgress.filter(id => id !== action.userId)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n    \r\ntype usersReducerActionsType = InferActionTypes<typeof actions>\r\nexport const actions = {\r\n    addUser: (id: number) =>  ({ type: 'ADD_USER', id: id } as const),\r\n    setFetching: (isFetching: boolean) => ({ type: 'SET_ISFETCHING', isFetching } as const),\r\n    delUser: (id: number) => ({ type: 'DELETE_USER', id } as const),\r\n    setUsers: (users: Array<oneUserType>) => ({ type: 'SET_USERS', users } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: 'SET_CURRENT_PAGE', currentPage } as const),\r\n    setTotalUserCount: (totalCount: number) => ({ type: 'SET_TOTAL_COUNT_USER', totalCount } as const),\r\n    following: (following: boolean, userId: number) => ({ type: 'FOLLOWING_IN_PROGRESS', following, userId } as const)\r\n}\r\n\r\n\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number):\r\nThunkAction<Promise<void>, RootState, unknown, usersReducerActionsType> => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setFetching(false));\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(actions.setFetching(true))\r\n        dispatch(actions.setUsers(response.items))\r\n        dispatch(actions.setTotalUserCount(response.totalCount))\r\n    }\r\n}\r\nexport const updateUsersThunkCreator = (pageNumber: number, pageSize: number):\r\nThunkAction<Promise<void>, RootState, unknown, usersReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setFetching(false))\r\n        dispatch(actions.setCurrentPage(pageNumber))\r\n        let response = await usersAPI.getUsers(pageNumber, pageSize)\r\n        dispatch(actions.setFetching(true))\r\n        dispatch(actions.setUsers(response.items))\r\n    }\r\n}\r\n\r\ntype DispatchType = Dispatch<usersReducerActionsType>\r\nconst addDelFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: (userId: number) => usersReducerActionsType) => {\r\n    dispatch(actions.following(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.following(false, userId))\r\n}\r\nexport const delUserFromFriends = (userId: number):\r\nThunkAction<Promise<void>, RootState, unknown, usersReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        addDelFlow(dispatch, userId, usersAPI.delUser.bind(usersAPI), actions.delUser)\r\n    }\r\n}\r\nexport const addUserToFriends = (userId: number):\r\nThunkAction<Promise<void>, RootState, unknown, usersReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        addDelFlow(dispatch, userId, usersAPI.addUser.bind(usersAPI), actions.addUser)\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n","import { stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { headerAPI, ResultCodesEnum, ResultCodeForCaptha } from \"../api/api\";\r\nimport { RootState } from \"./redaxstore\";\r\n\r\nconst SET_USER_AUTH = 'SET_USER_AUTH';\r\nconst SET_CUPTCHA = 'SET_CUPTCHA';\r\n\r\ntype setUserAuthType = {\r\n    type: typeof SET_USER_AUTH\r\n    payload: setUserAuthTypePayloadType\r\n\r\n}\r\nexport const setUserAuth = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): setUserAuthType => {\r\n    return (\r\n        { type: SET_USER_AUTH, payload: {userId, email, login, isAuth} }\r\n    );\r\n};\r\n\r\ntype setCaptchaType = {\r\n    type: typeof SET_CUPTCHA\r\n    payload: {captchaUrl: string}\r\n}\r\nexport const setCaptcha = (captchaUrl: string): setCaptchaType => {\r\n    return (\r\n        { type: SET_CUPTCHA, payload: {captchaUrl} }\r\n    );\r\n};\r\n\r\ntype authReducerActionsType = setUserAuthType | setCaptchaType\r\n\r\nexport type initialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nlet auth: initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nconst authReducer = (state = auth, action: authReducerActionsType): initialStateType => {\r\n    if (action.type === SET_USER_AUTH) {\r\n        return {\r\n            ...state,\r\n            ...action.payload,\r\n        };\r\n    } else if (action.type === SET_CUPTCHA) {\r\n        return {\r\n            ...state,\r\n            ...action.payload,\r\n        };\r\n    }\r\n    return state;\r\n};\r\n\r\ntype setUserAuthTypePayloadType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const authUserThunk = (): \r\nThunkAction<Promise<void>, RootState, unknown, authReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await headerAPI.userAuth()\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            let {id, email, login} = response.data;\r\n            dispatch(setUserAuth(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): \r\nThunkAction<Promise<void>, RootState, unknown, authReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await headerAPI.getCaptchaUrl()\r\n        const captchaUrl = response.url;\r\n        dispatch(setCaptcha(captchaUrl))\r\n    }\r\n}\r\n\r\nexport const loginThunkCreator = (email: string, password: string, rememberMe: boolean, captcha: string): \r\nThunkAction<Promise<void>, RootState, unknown, authReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await headerAPI.login(email, password, rememberMe, captcha)\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(authUserThunk())\r\n        } else {\r\n            if (response.resultCode === ResultCodeForCaptha.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            //@ts-ignore\r\n            dispatch(stopSubmit('login', {_error: response.messages[0] || 'error'}));\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutThunkCreator = (): \r\nThunkAction<Promise<void>, RootState, unknown, authReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        let response = await headerAPI.logout()\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(setUserAuth(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer;","import { ThunkAction } from \"redux-thunk\";\r\nimport { authUserThunk } from \"./authreducer\";\r\nimport { RootState } from \"./redaxstore\";\r\n\r\nconst SET_INITIALIZED = 'SET_INITIALIZED';\r\n\r\ntype initializedSuccessType = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\nexport const initializedSuccess = (): initializedSuccessType => {\r\n    return (\r\n        { type: SET_INITIALIZED }\r\n    );\r\n};\r\n\r\ntype appReducerActionsType = initializedSuccessType\r\n\r\nexport type initialStateType = {\r\n    initialized: boolean\r\n}\r\nlet initialState: initialStateType = {\r\n    initialized: false,\r\n};\r\n\r\n\r\nconst appReducer = (state = initialState, action: appReducerActionsType): initialStateType => {\r\n    if (action.type === SET_INITIALIZED) {\r\n        return {\r\n            ...state,\r\n            initialized: true,\r\n        };\r\n    } \r\n    return state;\r\n};\r\n\r\n\r\nexport const initializeApp = (): \r\nThunkAction<Promise<void>, RootState, unknown, appReducerActionsType> => {\r\n    return async (dispatch) => {\r\n        await Promise.all([dispatch(authUserThunk())])\r\n        dispatch(initializedSuccess());\r\n    }\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore, compose } from 'redux'\r\nimport messageReducer from './messageReducer'\r\nimport profileReducer from './profileReducer'\r\nimport usersReducer from './usersReducer'\r\nimport authReducer from './authreducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from './appReducer'\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messageReducer,\r\n    usersPage: usersReducer,\r\n    authReducer: authReducer,\r\n    appReducer: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\ntype RootReducer = typeof reducers\r\nexport type RootState = ReturnType<RootReducer>\r\n\r\ntype PropertiesTypes<T> = T extends {[key:string]: infer U} ? U : never;\r\nexport type InferActionTypes<T extends {[key:string]: (...args: any[])=>any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware, \r\n    // sagaMiddleware\r\n    )))\r\n    \r\nexport default store\r\n    \r\n// import rootSaga from './ZTestSagas'\r\n// import createSagaMiddleware from 'redux-saga'\r\n// sagaMiddleware.run(rootSaga)\r\n// const sagaMiddleware = createSagaMiddleware()\r\n// const store = createStore(reducers, applyMiddleware(sagaMiddleware, thunkMiddleware));","import React, {FC} from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Navbar.module.css'\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport PeopleRoundedIcon from '@material-ui/icons/PeopleRounded';\r\nimport MessageOutlinedIcon from '@material-ui/icons/MessageOutlined';\r\nimport RadioOutlinedIcon from '@material-ui/icons/RadioOutlined';\r\nimport LibraryMusicOutlinedIcon from '@material-ui/icons/LibraryMusicOutlined';\r\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\r\n\r\ntype PropsType = {}\r\n\r\nconst Navbar: FC<PropsType> = (props) => {\r\n    return ( \r\n        <nav className={classes.nav}>\r\n            <NavLink activeClassName={classes.active} className={classes.decoration} to=\"/profile\">\r\n                <div className={classes.navItem}>\r\n                    <div className={classes.navItemIcon}><AccountCircleRoundedIcon/></div>\r\n                    <div className={classes.navItemText}>My profile</div>\r\n                </div>\r\n            </NavLink>\r\n            <NavLink activeClassName={classes.active} className={classes.decoration} to=\"/users\">\r\n                <div className={classes.navItem}>\r\n                    <div className={classes.navItemIcon}><PeopleRoundedIcon/></div>\r\n                    <div className={classes.navItemText}>Users</div>\r\n                </div>\r\n            </NavLink>\r\n            <NavLink activeClassName={classes.active} className={classes.decoration} to=\"/dialogs\">\r\n                <div className={classes.navItem}>\r\n                    <div className={classes.navItemIcon}><MessageOutlinedIcon/></div>\r\n                    <div className={classes.navItemText}>Messages</div>\r\n                </div>\r\n            </NavLink>\r\n            <NavLink activeClassName={classes.active} className={classes.decoration} to=\"/news\">\r\n                <div className={classes.navItem}>\r\n                    <div className={classes.navItemIcon}><RadioOutlinedIcon/></div>\r\n                    <div className={classes.navItemText}>News</div>\r\n                </div>\r\n            </NavLink>\r\n            <NavLink activeClassName={classes.active} className={classes.decoration} to=\"/music\">\r\n                <div className={classes.navItem}>\r\n                    <div className={classes.navItemIcon}><LibraryMusicOutlinedIcon/></div>\r\n                    <div className={classes.navItemText}>Music</div>\r\n                </div>\r\n            </NavLink>\r\n            <NavLink activeClassName={classes.active} className={classes.decoration} to=\"/settings\">\r\n                <div className={classes.navItem}>\r\n                    <div className={classes.navItemIcon}><SettingsOutlinedIcon/></div>\r\n                    <div className={classes.navItemText}>Settings</div>\r\n                </div>\r\n            </NavLink>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, {FC} from 'react'\r\nimport classes from './News.module.css';\r\n\r\ntype PropsType ={}\r\n\r\nconst News: FC<PropsType> = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;\r\n","import React, {FC} from 'react'\r\nimport classes from './Music.module.css';\r\n\r\ntype PropsType = {}\r\n\r\nconst Music: FC<PropsType> = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;\r\n","import React, {FC} from 'react'\r\nimport classes from './Settings.module.css';\r\n\r\ntype PropsType = {}\r\n\r\nconst Settings: FC<PropsType> = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React, {FC} from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.scss';\r\n\r\ntype PropsType = {\r\n  id: number,\r\n  name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = ({id, name}) => {\r\n  return (\r\n    <div className={classes.dialogsItem}> \r\n      <NavLink activeClassName={classes.dialogsActive} className={classes.dialogsItemLink} to={`/dialogs/${id}`}> {name} </NavLink> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogItem;","import React, {FC} from 'react'\r\nimport classes from './../Dialogs.module.scss';\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = ({message}) => {\r\n  return (\r\n    <div className={classes.messageOuter}>\r\n      <div className={classes.messageInner}> {message} </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport { Field, WrappedFieldProps } from 'redux-form';\r\nimport { fieldValidatorType } from '../../../redux/utils/validators/validators';\r\nimport classes from './FormsControls.module.css'\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    const hasError = !!(meta.touched && meta.error)\r\n    return (\r\n        <div className={classes.bord + ' ' + (hasError ? classes.error : '')}>\r\n            <textarea {...meta} {...input} {...restProps}/>\r\n            {hasError ? <span>{meta.error}</span> : undefined}\r\n        </div>)\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    const hasError = !!(meta.touched && meta.error)\r\n    return (\r\n        <div className={classes.bord + ' ' + (hasError ? classes.error : '')}>\r\n            <input {...meta} {...input} {...restProps}/>\r\n            {hasError ? <span>{meta.error}</span> : undefined}\r\n        </div>)\r\n}\r\n\r\nexport const createField = (placeholder: string, \r\n                        name: string, \r\n                        component: string | FC<WrappedFieldProps>, \r\n                        validators: Array<fieldValidatorType>, \r\n                        props = {}, \r\n                        text = '') => {\r\n    return <div>\r\n                <Field placeholder={placeholder} name={name} component={component} \r\n                validate={validators}\r\n                {...props}/> {text}\r\n    </div>\r\n}","export type fieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: fieldValidatorType = (value) => {\r\n    if (value) {\r\n        return (undefined);\r\n    }\r\n    return ('Field is required')\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number):fieldValidatorType => (value) => {\r\n    if (value.length > maxLength) {\r\n        return (`Max length is ${maxLength} symbols`);\r\n    }\r\n    return (undefined)\r\n}","import React, {FC} from 'react'\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport classes from './Dialogs.module.scss';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../Common/FormControls/FormsControls';\r\nimport { maxLengthCreator, requiredField } from '../../redux/utils/validators/validators';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addNewMessage, messagePageType } from '../../redux/messageReducer';\r\nimport { WithAuthRedirect } from '../../HOC/withAuthRedirect';\r\nimport { RootState } from '../../redux/redaxstore';\r\n\r\ntype PropsType = {}\r\n\r\nconst Dialogs: FC<PropsType> = WithAuthRedirect(() => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const messagesPage = useSelector((state: RootState): messagePageType => state.messagesPage)\r\n\r\n  let dialogElements = messagesPage.dialogs.map((item) => {\r\n    return (<DialogItem name={item.name} id={item.id} />);\r\n  });\r\n\r\n  let messagesElements = messagesPage.messages.map((itemMessage) => {\r\n    return (<Message message={itemMessage.message} />);\r\n  })\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>\r\n        {dialogElements}\r\n      </div>\r\n      <div className={classes.messageArea}>\r\n        <div className={classes.dialogsMessages}>\r\n          {messagesElements}\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={(e: any) => {dispatch(addNewMessage(e.message)); e.message = ''}}/>\r\n      </div>\r\n    </div>\r\n  );\r\n})\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<string>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div >\r\n        <Field className={classes.messageTextarea} placeholder='Your message' name='message' component={Textarea}\r\n        validate={[requiredField, maxLength]}/>\r\n      </div>\r\n      <div>\r\n        <button className={classes.messageButton} id='addMessageButton'>Add Message</button>\r\n        <label className={classes.messageLabel} htmlFor='addMessageButton'>\r\n          <span className={classes.messageLabelText}>\r\n            Add Message\r\n          </span>\r\n        </label>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<string>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, { useState, FC } from 'react';\r\nimport classes from './Users.module.scss';\r\nimport {useSelector} from 'react-redux'\r\nimport {RootState} from '../../redux/redaxstore'\r\n\r\ntype PropsType = {\r\n    className?: string | boolean\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({onPageChanged}) => {\r\n    const totalUsersCount = useSelector((state: RootState): number => state.usersPage.totalUsersCount)\r\n    const pageSize = useSelector((state: RootState): number => state.usersPage.pageSize)\r\n    const currentPage = useSelector((state: RootState): number => state.usersPage.currentPage)\r\n\r\n    const [currentInterval, setCurrentInterval] = useState<number>(1);\r\n    const prevPage = (): void => {\r\n        setCurrentInterval(currentInterval - 1)\r\n    }\r\n    const nextPage = (): void => {\r\n        setCurrentInterval(currentInterval + 1)\r\n    }\r\n\r\n    let pagesCount: number = Math.ceil(totalUsersCount / pageSize);\r\n    let totalIntervalCount = Math.ceil(pagesCount / pageSize)\r\n    let pages = [] as Array<number>;\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let left: number = (pageSize * currentInterval + 1) - pageSize;\r\n    let right: number = (pageSize * currentInterval + 1) - 1;\r\n    debugger\r\n    \r\n    return (<div className={classes.paginator}>\r\n        <button className={classes.paginatorButton} disabled={currentInterval === 1} onClick={prevPage}>PREV</button>\r\n        {pages.map((p: number) => {\r\n            if (p >= left && p <= right) {\r\n                debugger\r\n                return (\r\n                    <span className={(currentPage === p) as any && classes.selectedPage} \r\n                        onClick={(e) => { onPageChanged(p) }}>{p}</span>\r\n                )\r\n            }\r\n            return false\r\n        })}\r\n        <button className={classes.paginatorButton} disabled={currentInterval === totalIntervalCount} onClick={nextPage}>NEXT</button>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Users.module.scss';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { delUserFromFriends, addUserToFriends } from '../../redux/usersReducer';\r\nimport { oneUserType } from '../../types.ts/types';\r\nimport { RootState } from '../../redux/redaxstore';\r\n\r\ntype PropsType = {\r\n    item: oneUserType\r\n}\r\n\r\nconst User: FC<PropsType> = (props) => {\r\n\r\n    const followingInProgress = useSelector((state:RootState):Array<number> => state.usersPage.followingInProgress)\r\n    const dispatch = useDispatch();\r\n    let item = props.item;\r\n\r\n    return (<div className={classes.user}>\r\n        <div className={classes.userDecor}>\r\n            <div>\r\n                <NavLink to={'/profile/' + item.id} >\r\n                    <img src={item.photos.large || \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png\"} className={classes.userAva} alt=\"no img\" />\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n            {item.followed ?\r\n                <button className={classes.userButtonUnfollow} disabled={followingInProgress.some(id => id === item.id)} onClick={() => {\r\n                    dispatch(delUserFromFriends(item.id));\r\n                }\r\n                }>{'Unfollow'}</button> :\r\n                <button className={classes.userButtonFollow} disabled={followingInProgress.some(id => id === item.id)} onClick={() => {\r\n                    dispatch(addUserToFriends(item.id));\r\n                }\r\n                }>{'Follow'}</button>\r\n            }\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <div className={classes.userName}>{item.name}</div>\r\n            <div>{item.status}</div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/giphy.b75b820d.gif\";","import React, {FC} from 'react';\r\nimport classes from './Loader.module.css'\r\nimport giphy from './giphy.gif'\r\n\r\ntype PropsType = {}\r\n\r\nconst Loader: FC<PropsType> = () => {\r\n    return (\r\n        <div>\r\n            <img src={giphy} className={classes.gifka} alt='Текст'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, {FC} from 'react';\r\nimport Paginator from './Paginator';\r\nimport User from './User';\r\nimport {useSelector} from 'react-redux'\r\nimport { RootState } from '../../redux/redaxstore';\r\nimport Loader from '../../Preloader/Loader';\r\n\r\ntype PropsType ={\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector((state: RootState) => state.usersPage.users)\r\n    const isFetching = useSelector((state: RootState) => state.usersPage.isFetching)\r\n\r\n    return (\r\n        <div>\r\n            <Paginator \r\n                onPageChanged={props.onPageChanged}\r\n            />\r\n            {isFetching || <Loader/>}\r\n            {users.map(\r\n                item => <User \r\n                    key={item.id} item={item} \r\n                /> \r\n            )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import React, { useEffect, FC } from 'react'\r\nimport Users from './Users';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {getUsersThunkCreator, updateUsersThunkCreator} from './../../redux/usersReducer'\r\nimport { RootState } from '../../redux/redaxstore';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nconst UsersContainer: FC<PropsType> = () => {\r\n    const [currentPage, pageSize] = useSelector((state: RootState):[number, number] => {\r\n        return [state.usersPage.currentPage, state.usersPage.pageSize]\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize))\r\n    }, [currentPage, pageSize, dispatch])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        // dispatch({ type: 'UPDATE_USERS', pageNumber, pageSize })\r\n        dispatch(updateUsersThunkCreator(pageNumber, pageSize))\r\n    }\r\n\r\n     \r\n    return (\r\n        <div>\r\n            <Users onPageChanged = {onPageChanged}\r\n            />\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default UsersContainer;\r\n","import React, {FC} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/redaxstore';\r\nimport { profileType } from '../../../../types.ts/types';\r\nimport classes from './Post.module.scss';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n\r\n\r\ntype PropsType = {\r\n  message: string\r\n  like: string\r\n}\r\n\r\nconst Post: FC<PropsType> = ({message, like}) => {\r\n  const profile = useSelector((state: RootState):profileType | null => state.profilePage.profile)\r\n  if (!profile) {\r\n    return <div></div>\r\n  }\r\n  let postImage = profile.photos.large;\r\n  if(!profile.photos.large) {\r\n    postImage = \"https://wgsi.utoronto.ca/wp-content/uploads/2020/12/blank-profile-picture-png.png\"\r\n  }\r\n\r\n  return (\r\n    <div className={classes.item}>\r\n      <img className={classes.itemImg} src={`${postImage}`} alt=\"no img\"></img>\r\n      <div className={classes.itemInner}>\r\n        <div className={classes.itemInnerMessage}>{message}</div>\r\n        <div className={classes.itemInnerLike}>\r\n          <div className={classes.itemInnerLikeIcon}><FavoriteIcon/></div>\r\n          <div className={classes.itemInnerLikeText}>{like}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React, {FC} from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\n// import { maxLengthCreator, requiredField } from '../../../../redux/utils/validators/validators'\r\nimport { Textarea } from '../../../Common/FormControls/FormsControls'\r\nimport classes from './postForm.module.scss'\r\n\r\ntype PropsType = {\r\n    onSubmit: (e: any) => void\r\n}\r\n\r\nexport const MyPostForm: FC<PropsType> = ({onSubmit}) => {\r\n    return (\r\n        <div>\r\n            <ReduxPostForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n// const maxLength10 = maxLengthCreator(10);\r\n\r\nconst PostForm: FC<InjectedFormProps<string>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n            <div>\r\n                <Field placeholder={\"Your post text\"} name={'postText'} component={Textarea}\r\n                maxLength={300} className={classes.formText} rows={6} cols={80}></Field>\r\n            </div>\r\n            <div>\r\n                <button id='addPostButton' className={classes.formButton}>Add post</button>\r\n                <label htmlFor='addPostButton' className={classes.formLabel}>\r\n                    <span className={classes.formLabelText}>\r\n                        Add New Post\r\n                    </span>\r\n                </label>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxPostForm = reduxForm<string>({\r\n    form: 'postText', \r\n})(PostForm)\r\n\r\n","import classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport React, {FC} from 'react';\r\nimport { MyPostForm } from './postForm/postForm';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {RootState} from '../../../redux/redaxstore'\r\nimport { postsType } from '../../../types.ts/types';\r\nimport { actions } from './../../../redux/profileReducer';\r\n\r\n\r\ntype PropsType = {}\r\n\r\nconst MyPosts: FC<PropsType> = () => {\r\n\r\n  const posts = useSelector((state: RootState):Array<postsType> => {return state.profilePage.posts})\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  let addNewTextPost = (e: any): void => {\r\n    dispatch(actions.addPost(e.postText))\r\n    e.postText = '';\r\n  };\r\n\r\n  let postElements = posts.map((item) => {\r\n    return (<Post key={item.id} message={item.message} like={item.likeCount}/>);\r\n  });\r\n\r\n  return (\r\n    <div className={classes.posts}>\r\n      <h3 className={classes.postsTitle}> My posts </h3>\r\n      <div>\r\n        <MyPostForm onSubmit={addNewTextPost}/>\r\n      </div>\r\n      <div>\r\n        {postElements}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPosts;","import React, {FC} from 'react'\r\nimport { reduxForm } from 'redux-form';\r\nimport { requiredField } from '../../../redux/utils/validators/validators';\r\nimport { createField, Input } from '../../Common/FormControls/FormsControls';\r\nimport classes from './ProfileInfo.module.scss';\r\nimport { useDispatch } from 'react-redux'\r\nimport { setProfileUpdateThunk } from '../../../redux/profileReducer';\r\nimport { profileType } from '../../../types.ts/types';\r\n\r\ntype PropsType = {\r\n  error: string,\r\n  initialValues: any,\r\n  profile: profileType,\r\n  offEditMode: () => void\r\n}\r\n\r\nconst ProfileEditMode: FC<PropsType> = ({error, initialValues, profile, offEditMode}) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (profileData: any) => {\r\n    //@ts-ignore\r\n    dispatch(setProfileUpdateThunk(profileData)).then(\r\n      () => {\r\n        offEditMode()\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    //@ts-ignore\r\n    <ReduxProfileForm error={error} initialValues={initialValues} profile={profile} onSubmit={onSubmit}\r\n     />\r\n  );\r\n}\r\n\r\ntype PropsType_2 = {\r\n  error: string,\r\n  profile: profileType,\r\n  handleSubmit: () => void\r\n}\r\n\r\nconst ProfileEditModeForm: FC<PropsType_2> = ({error, profile, handleSubmit}) => {\r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {error \r\n                && <div > {\r\n                    error }\r\n                </div>\r\n      }\r\n      <button>Отправить</button>\r\n      <div>\r\n        <b>Full Name</b> {createField('Full Name', 'fullName', Input, [requiredField], {})}\r\n      </div>\r\n      <div>\r\n        <b>About Me</b> {createField('About Me', 'aboutMe', Input, [], {})}\r\n      </div>\r\n      <div>\r\n        <b>Looking For A Job</b> {createField('', 'lookingForAJob', Input, [], { type: \"checkbox\" })}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b> {createField('My skills', 'lookingForAJobDescription', Input, [], {})}\r\n      </div>\r\n      <div>{`Контакты: `}</div>\r\n      <div>\r\n        {Object.entries(profile.contacts).map(item => {\r\n          return (<div key={item[0]} className={classes.contact}>\r\n              <b>{item[0] + ':'}</b>\r\n              {createField(item[0], 'contacts.' + item[0], Input, [], {})}\r\n            </div>)\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst ReduxProfileForm = reduxForm({\r\n  form: 'profileForm'\r\n  //@ts-ignore\r\n})(ProfileEditModeForm)\r\n\r\n\r\n\r\nexport default ProfileEditMode;","import React, {FC} from 'react'\r\nimport { profileType } from '../../../types.ts/types';\r\nimport classes from './ProfileInfo.module.scss';\r\n\r\ntype PropsType = {\r\n  profile: profileType, \r\n  owner: () => boolean, \r\n  onEditMode: () => void\r\n}\r\n\r\nconst ProfileReadMode: FC<PropsType> = ({profile, owner, onEditMode}) => {\r\n  return (\r\n    <div className={classes.profileInfo}>\r\n      <div>\r\n          <span className={classes.profileInfoTitle}>Main information</span>\r\n          {owner() && <label htmlFor='profileEditButton' className={classes.profileInfoEdit}>Edit</label>}\r\n          {owner() && <button onClick={onEditMode} id='profileEditButton' className={classes.profileInfoButton}>EditMode</button>}\r\n      </div>\r\n      <div>{profile.fullName}</div>\r\n      <div>{`User ID: ${profile.userId}`}</div>\r\n      <div>{`Обо мне: ${!!profile.aboutMe ? profile.aboutMe : 'Не указано'}`}</div>\r\n      <div>{`Ищу работу: ${profile.lookingForAJob ? 'yes' : 'no'}`}</div>\r\n      {profile.lookingForAJob ? <div>{`Мои профессиональные навыки: ${profile.lookingForAJobDescription}`}</div> : null}\r\n      <div>{`Контакты: `}</div>\r\n      <div className={classes.profileInfoContact}>\r\n        {Object.entries(profile.contacts).map(item => {\r\n          const value = (\r\n            !!item[1] \r\n            && <div key={item[0]}>{`${item[0]} : ${item[1]}`}</div>\r\n          )\r\n          return value\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileReadMode;","import React, {useEffect, useState, FC, ChangeEvent} from 'react';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux'\r\nimport { updateStatusThunk } from '../../../redux/profileReducer';\r\nimport { RootState } from '../../../redux/redaxstore';\r\nimport classes from './ProfileInfo.module.scss';\r\n\r\ntype PropsType = {\r\n  owner: () => boolean\r\n}\r\n\r\nconst ProfileStatus: FC<PropsType> = React.memo(({owner}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const statusFromServer = useSelector((state: RootState): string => state.profilePage.status, shallowEqual)\r\n\r\n  let [editMode, setEditMode] = useState<boolean>(false)\r\n  let [status, setStatus] = useState<string>(statusFromServer)\r\n\r\n  useEffect( () => {\r\n    setStatus(statusFromServer)\r\n  }, [statusFromServer])\r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true);\r\n  } \r\n\r\n  const offEditMode = () => {\r\n    setEditMode(false);\r\n    dispatch(updateStatusThunk(status))\r\n  } \r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.status}>\r\n      {owner() ? (!editMode &&\r\n        <div>\r\n          <span className={classes.statusSpan} onDoubleClick={onEditMode}>{statusFromServer || 'No status'}</span>\r\n        </div>) : (<span className={classes.statusSpan}>{statusFromServer || 'No status'}</span>)\r\n      }\r\n      {editMode &&\r\n        <div>\r\n          <input className={classes.statusInput} autoFocus={true} value={status}\r\n          onBlur={offEditMode} onChange={onStatusChange} maxLength={60}\r\n          ></input>\r\n        </div>\r\n      } \r\n    </div>\r\n  );\r\n\r\n})\r\n\r\nexport default ProfileStatus;","import React, { useState, FC } from 'react'\r\nimport Loader from '../../../Preloader/Loader';\r\nimport ProfileEditMode from './ProfileEditMode';\r\nimport classes from './ProfileInfo.module.scss';\r\nimport ProfileReadMode from './ProfileReadMode';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setPhotoThunk } from '../../../redux/profileReducer';\r\nimport { RootState } from '../../../redux/redaxstore';\r\nimport { profileType } from '../../../types.ts/types';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype PropsType = {\r\n  owner: () => boolean\r\n  error: string\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = (props) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const profile = useSelector((state: RootState):profileType | null => state.profilePage.profile)\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n  const onEditMode = (): void => {\r\n    setEditMode(true)\r\n  }\r\n  const offEditMode = (): void => {\r\n    setEditMode(false)\r\n  }\r\n\r\n  if (!profile) {\r\n    return <Loader/>\r\n  }\r\n\r\n  const savePhoto = (e: any) => {\r\n    dispatch(setPhotoThunk(e.currentTarget.files[0]))\r\n  }\r\n  return (\r\n      <div className={classes.description}>\r\n        <div>\r\n          <img className={classes.userImg} alt=\"no img\" src={profile.photos.large || \"https://wgsi.utoronto.ca/wp-content/uploads/2020/12/blank-profile-picture-png.png\"} />\r\n          {(props.owner()) \r\n          ? [<input onChange={savePhoto} type='file' accept='image/*' id='avatar' className={classes.userImgInput}></input>,\r\n            <label htmlFor='avatar' className={classes.userImgLabel}>\r\n              <Button variant=\"contained\" color=\"primary\" component=\"span\" className={classes.userImgLabelButton}>\r\n                Upload\r\n              </Button>\r\n            </label>]\r\n          \r\n          : undefined\r\n          }\r\n        </div>\r\n        <div>\r\n          <div className={classes.userNameAboveStatus}>{profile.fullName}</div>\r\n          <ProfileStatusWithHooks owner={props.owner}/>\r\n          {!editMode \r\n            ? <ProfileReadMode onEditMode={onEditMode} owner={props.owner} profile={profile}/> \r\n            : <ProfileEditMode error={props.error} offEditMode={offEditMode} initialValues={profile} profile={profile}/>\r\n          }\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;","import React, {FC} from 'react'\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  owner: () => boolean\r\n  error: string\r\n}\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo error={props.error} owner={props.owner} \r\n      />\r\n      <MyPosts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React, { useEffect, FC } from 'react';\r\nimport Profile from './Profile';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setUserProfileThunk, getStatusThunk } from '../../redux/profileReducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { RootState } from '../../redux/redaxstore';\r\n\r\ntype PropsType = {\r\n  match: any,\r\n  history: any,\r\n  error: string\r\n}\r\n\r\nconst ProfileContainer: FC<PropsType> = (props) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const authorizedUserId = useSelector( (state: RootState): number | null => state.authReducer.userId)\r\n  \r\n  const currentUserId = props.match.params.userId\r\n  const owner = (): boolean => {\r\n    let bool = !!(authorizedUserId && (currentUserId === undefined || currentUserId === authorizedUserId))\r\n    return (bool)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let userId = props.match.params.userId;\r\n    if (!userId) {\r\n      userId = authorizedUserId;\r\n      if (!userId) {\r\n        props.history.push('/login');\r\n      }\r\n    }\r\n    dispatch(setUserProfileThunk(userId));\r\n    dispatch(getStatusThunk(userId));\r\n  }, [props, authorizedUserId, dispatch])\r\n  \r\n  return (\r\n    <div>\r\n      <Profile {...props} error={props.error} owner={owner} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  //@ts-ignore\r\n)(ProfileContainer)\r\n","import classes from './Header.module.css';\r\nimport React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { logoutThunkCreator } from '../../redux/authreducer';\r\nimport { RootState } from '../../redux/redaxstore';\r\nimport { Button } from '@material-ui/core';\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\n\r\ntype PropsType = {}\r\n\r\nconst Header: FC<PropsType> = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n\r\n    const login = useSelector((state: RootState): string | null => state.authReducer.login)\r\n    const isAuth = useSelector((state: RootState): boolean => state.authReducer.isAuth)\r\n\r\n    return (\r\n        <header className={classes.head}>\r\n            <NavLink to='/'>\r\n                <div className={classes.icon}><ThumbUpAltOutlinedIcon color=\"primary\" style={{ fontSize: 40 }}/></div>\r\n            </NavLink>\r\n            <div className={classes.login}>\r\n                {isAuth\r\n                ? <div className={classes.logout}>\r\n                    <div className={classes.test + ' ' + classes.userName}>\r\n                        {login + ' '}\r\n                    </div>\r\n                    <div className={classes.test}>\r\n                        <Button className={classes.buttonLogout} variant=\"outlined\" color=\"primary\" onClick={() => { dispatch(logoutThunkCreator()) }}>Logout</Button>\r\n                    </div>\r\n                </div>\r\n                : <NavLink to='/login'>\r\n                    <div className={classes.login}><Button variant=\"contained\" color=\"primary\">Login</Button></div>\r\n                </NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n})\r\n\r\nexport default Header;","import React, {FC} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { RootState } from '../../redux/redaxstore'\r\nimport { requiredField } from '../../redux/utils/validators/validators'\r\nimport { createField, Input } from '../Common/FormControls/FormsControls'\r\nimport classes from './../Common/FormControls/FormsControls.module.css'\r\nimport {formDataType} from './login'\r\n\r\nconst LoginForm: FC<InjectedFormProps<formDataType>> = ({handleSubmit, error}) => {\r\n\r\n    const captchaUrl = useSelector((state: RootState): string | null => state.authReducer.captchaUrl)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"email\", \"email\", Input, [requiredField])}\r\n            {createField(\"password\", \"password\", Input, [requiredField], {type: \"password\"})}\r\n            {createField('', \"rememberMe\", Input, [], {type: \"checkbox\"}, 'Remember Me')}\r\n            {captchaUrl && <img alt=\"no img\" src={captchaUrl}></img>}\r\n            {captchaUrl && createField(\"enter symbols\", \"captcha\", Input, [requiredField])}\r\n            {error \r\n                && <div className={classes.commonError}> {\r\n                    error }\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>LOGIN</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<formDataType>({form: 'login'})(LoginForm)\r\n\r\nexport default ReduxLoginForm;","import React, {FC} from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { loginThunkCreator } from '../../redux/authreducer'\r\nimport { RootState } from '../../redux/redaxstore'\r\nimport ReduxLoginForm from './loginForm'\r\n\r\ntype PropsType = {}\r\n\r\nexport type formDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\nconst Login: FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isAuth = useSelector((state: RootState): boolean => state.authReducer.isAuth)\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        dispatch(loginThunkCreator(formData.email, formData.password, \r\n            formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return (\r\n            <Redirect to={'/profile'}/>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <ReduxLoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import './App.css';\nimport React, { useEffect } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport { Route, withRouter } from 'react-router-dom';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport Dialogs from './components/Dialogs/Dialogs';\nimport UsersContainer from './components/Users/UsersContainer'\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport Header from './components/Header/Header';\nimport Login from './components/Login/login';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { initializeApp } from './redux/appReducer';\nimport Loader from './Preloader/Loader';\n\nconst App = withRouter((props) => {\n\n  const initialized = useSelector(state => state.appReducer.initialized)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(initializeApp())\n  }, [dispatch])\n\n  if (!initialized) {\n    return <Loader/>\n  }\n\n  return (\n      <div className='app-wrapper'>\n        <Header />\n        <Navbar />\n        <div className='app-wrapper-content'>\n          <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\n          <Route path='/dialogs' render={() => <Dialogs />} />\n          <Route path='/users' render={() => <UsersContainer />} />\n          <Route path='/news' render={() => <News />} />\n          <Route path='/music' render={() => <Music />} />\n          <Route path='/settings' render={() => <Settings />} />\n          <Route path='/login' render={() => <Login />} />\n          <Route exact path='/' render={() => <Login />} />\n        </div>\n        <div className='weather'>\n          <div className='weatherYandex'>\n            <a href=\"https://clck.yandex.ru/redir/dtype=stred/pid=7/cid=1228/*https://yandex.ru/pogoda/54\" rel=\"noreferrer\" target=\"_blank\"><img src=\"https://info.weather.yandex.net/54/1_white.ru.png?domain=ru\" border=\"0\" alt=\"Яндекс.Погода\"/><img width=\"1\" height=\"1\" src=\"https://clck.yandex.ru/click/dtype=stred/pid=7/cid=1227/*https://img.yandex.ru/i/pix.gif\" alt=\"\" border=\"0\"/></a>\n          </div>\n        </div>\n      </div>\n  );\n  \n})\n\nexport default App","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './redux/redaxstore';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\nwindow.store = store\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"Header_head__2Fn-N\",\"icon\":\"Header_icon__1lj7M\",\"login\":\"Header_login__3nGY8\",\"logout\":\"Header_logout__21Q1q\",\"test\":\"Header_test__aBgPE\",\"buttonLogout\":\"Header_buttonLogout__YZlty\",\"userName\":\"Header_userName__MayFa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2A05Z\",\"itemInner\":\"Post_itemInner__1sqV9\",\"itemInnerLike\":\"Post_itemInnerLike__2BRj-\",\"itemInnerLikeIcon\":\"Post_itemInnerLikeIcon__2qsQF\",\"itemInnerLikeText\":\"Post_itemInnerLikeText__StG7t\",\"itemInnerMessage\":\"Post_itemInnerMessage__2u6Tx\",\"itemImg\":\"Post_itemImg__2B0Wr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bord\":\"FormsControls_bord__3CyJh\",\"error\":\"FormsControls_error__3V-Xt\",\"commonError\":\"FormsControls_commonError__1UuYx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"postForm_form__3hbeC\",\"formText\":\"postForm_formText__1mTDD\",\"formButton\":\"postForm_formButton__1KcC8\",\"formLabel\":\"postForm_formLabel__29oLg\",\"formLabelText\":\"postForm_formLabelText__1KUtv\"};"],"sourceRoot":""}